// Remote controlled bipolar stepper motor using PIC16F877A and L293D CCS C code
// http://ccspicc.blogspot.com/
// electronnote@gmail.com

#include <16F877A.h>
#fuses HS,NOWDT,NOPROTECT,NOLVP
#use delay(clock = 8000000)
#use fast_io(B)
#use fast_io(C)
#use fast_io(D)

//LED baðlantýlarý
#define LED_1 PIN_C7
#define LED_2 PIN_C6
#define LED_3 PIN_C5
#define LED_4 PIN_C4

unsigned int8 step_number = 0, speed_delay = 2, led_speed=100;
unsigned int32 remote_code;

void LED_sequence1(){                                                            //LED Sekansý 1
   output_bit(LED_1, 1);
   delay_ms(led_speed);
   output_bit(LED_2, 1);
   delay_ms(led_speed);
   output_bit(LED_3, 1);
   delay_ms(led_speed);
   output_bit(LED_4, 1);
   delay_ms(led_speed);
   output_bit(LED_1, 0);
   output_bit(LED_2, 0);
   output_bit(LED_3, 0);
   output_bit(LED_4, 0);
   delay_ms(led_speed);
   
}
void LED_sequence2(){                                                            //Led Sekansý 2
   output_bit(LED_1, 1);
   delay_ms(led_speed);
   output_bit(LED_1, 0);
   output_bit(LED_2, 1);
   delay_ms(led_speed);
   output_bit(LED_2, 0);
   output_bit(LED_3, 1);
   delay_ms(led_speed);
   output_bit(LED_3, 0);
   output_bit(LED_4, 1);
   delay_ms(led_speed);
   output_bit(LED_4, 0);
   output_bit(LED_1, 0);
   output_bit(LED_2, 0);
   output_bit(LED_3, 0);
   delay_ms(led_speed);

}

#INT_TIMER1                                                                      // Timer1 kesme ISR
void timer1_isr(void){
  remote_code = 0;
  clear_interrupt(INT_TIMER1);
  disable_interrupts(INT_TIMER1);
}
#INT_EXT                                                                         // Dýþ kesme ISR
void ext_isr(void){
  unsigned int8 count = 0, i;
  unsigned int32 ir_code;
  //NEC protokolünün kontrolü ve decode edilmesi
  // 9ms'lik lojik High sinyalinin kontrol et
  while((input(PIN_B0) == 0) && (count < 200)){
    count++;
    delay_us(50);}
  if( (count > 199) || (count < 160))                                            // Lojik 1 8-10ms aralýðýnda ise ise kontrol etmeye devam et
    return;                          
  count = 0;
  // 4.5ms'lik lojik Low sinyalinin kontrol et
  while((input(PIN_B0)) && (count < 100)){
    count++;
    delay_us(50);}
  if( (count > 99) || (count < 30))                                              // Lojik 0 5-1.5ms aralýpýnda ise ise kontrol etmeye devam et
    return;
  // Düðmelere basýl tutulduðunda gelen komutu oku
  if(count < 60){
    count = 0;
    while((input(PIN_B0) == 0) && (count < 14)){
      count++;
      delay_us(50);}
    if( (count > 13) || (count < 8))                                             // NEC protokolü mü?
      return;
    if((remote_code == 0x00FF02FD) || (remote_code == 0x00FF22DD))               //>>| ==> 0x00FF02FD  veya   |<< ==> 0x00FF22DD düðmelerine baþýlýrsa timer1'i sýfýrla
    set_timer1(0);
  }
  // Komutu oku (32 bit ==> 16 bit adres, 16 bit komut)
  for(i = 0; i < 32; i++){
    count = 0;
    while((input(PIN_B0) == 0) && (count < 14)){                                 //Lojik 0
      count++;
      delay_us(50);}
    if( (count > 13) || (count < 8))                                             // NEC protokolü mü?
      return;                          
    count = 0;
    while((input(PIN_B0)) && (count < 40)){
      count++;
      delay_us(50);}
    if( (count > 39) || (count < 8))                                             // NEC protokolü mü?
      return;                           
    if( count > 20)                                                              // Sinyalin uzunluðu 1ms'den büyük ise 1 yaz
      bit_set(ir_code, (31 - i));                                                // 1 yaz (31 - i)
    else                                                                         // Sinyalin uzunluðu 1ms'den büyük ise 1 yaz
      bit_clear(ir_code, (31 - i));                                              // 0 yaz (31 - i)
  }
  if((ir_code == 0x00FF02FD) || (ir_code == 0x00FF22DD)){                        // >>| ==> 0x00FF02FD    |<< ==> 0x00FF22DD
    set_timer1(0);                                                               // Kesmeleri resetle ve tekrar aktive et
    clear_interrupt(INT_TIMER1);
    enable_interrupts(INT_TIMER1);}
  if(ir_code == 0x00FFE01F){                                                     //  -  ==> 0x00FFE01F   Motorun hýzýný düþürme iþlemi   
    speed_delay++;
    if(speed_delay > 20) speed_delay = 20;
    return;}
  if(ir_code == 0x00FFA857){                                                     //  +  ==> 0x00FFA857   Motorun hýzýný arttýrma iþlemi
    speed_delay--;
    if(speed_delay < 2) speed_delay = 2;
    return;}
  if(ir_code == 0x00FFA857){                                                     // LED_1'i yak ve 100ms sonra söndür
   output_bit(LED_1, 1);
   delay_ms(100);
   output_bit(LED_1, 0);
  }
  if(ir_code == 0x00FFA857){                                                     // LED_2'i yak ve 100ms sonra söndür
   output_bit(LED_2, 1);
   delay_ms(100);
   output_bit(LED_2, 0);
  }
  if(ir_code == 0x00FFA857){                                                     // LED_3'i yak ve 100ms sonra söndür
   output_bit(LED_3, 1);
   delay_ms(100);
   output_bit(LED_3, 0);
  }
  if(ir_code == 0x00FFA857){                                                     // LED_4'i yak ve 100ms sonra söndür
   output_bit(LED_4, 1);
   delay_ms(100);
   output_bit(LED_4, 0);
  }
  if(ir_code == 0x00FFA857){                                                     // LED sekansý 1'i gerçekleþtir
   LED_sequence1();
  }
  if(ir_code == 0x00FFA857){                                                     // LED sekansý 2'yi gerçekleþtir
   LED_sequence2();
  }
  remote_code = ir_code; 
}
void stepper(int8 step){                                                         //Step motoru Tam adým sürme fonksiyonu
  switch(step){
    case 0:
      output_d(0b00000011);
    break;
    case 1:
      output_d(0b00000110);
    break;
    case 2:
      output_d(0b00001100);
    break;
    case 3:
      output_d(0b00001001);
    break;
  }
}


void main(){
  output_b(0);                                                                   // PORTB'yi temizle
  set_tris_b(0xF7);
  port_b_pullups(TRUE);                                                          // PORTB'deki iç kesmeleri aktive et
  output_d(0);
  set_tris_d(0);
  output_c(0);
  set_tris_c(0);
  setup_timer_1(T1_INTERNAL | T1_DIV_BY_4);                                      // Timer1'e 1/4 prescaler deðeri ata
  enable_interrupts(GLOBAL);                                                     // Global kesmeleri aktif et
  enable_interrupts(INT_EXT_H2L);                                                // Dýþ kesmeleri aktive et
  while(TRUE){
    while(remote_code == 0);                                                     //Komut alýnmýyorsa bekle
    while((remote_code == 0x00FFE21D) || (remote_code == 0x00FF02FD)){           // CH+ ==> 0x00FFE21D    >>| ==> 0x00FF02FD   
      step_number++;                                                             //Motorun ileri sürülme iþlemi
      if(step_number > 3) 
        step_number = 0;
      stepper(step_number);
      delay_ms(speed_delay);
    }
    while((remote_code == 0x00FFA25D) || (remote_code == 0x00FF22DD)){           // CH- ==> 0x00FFA25D    |<< ==> 0x00FF22DD
      if(step_number < 1) 
        step_number = 4;
      step_number--;                                                             //Motorun geri sürülme iþlemi
      stepper(step_number);
      delay_ms(speed_delay);
    }
  output_d(0);
  if((remote_code != 0x00FFE21D) && (remote_code != 0x00FFA25D))                 // CH+ ==> 0x00FFE21D    CH- ==> 0x00FFA25D
  remote_code = 0;                                                               //CH+ veya CH- düðmelerine basýlmadýðýnda motoru durdur
  }
}
